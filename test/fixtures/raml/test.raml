#%RAML 0.8
---
title: Test API
version: 1.0
baseUri: http://example.com

# Test security scheme.
securitySchemes:
  - oauth_2_0:
      description: |
        OAuth2 is a protocol that lets external apps request authorization to private
        details in a user's GitHub account without getting their password. This is
        preferred over Basic Authentication because tokens can be limited to specific
        types of data, and can be revoked by users at any time.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "access_token" query string parameter.
        queryParameters:
          access_token:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "Authorization" header
        responses:
          404:
            description: Unauthorized
      settings:
        authorizationUri: https://github.com/login/oauth/authorize
        accessTokenUri: https://github.com/login/oauth/access_token
        authorizationGrants: [ code ]
        scopes:
          - user
          - "user:email"
          - "user:follow"
          - public_repo
          - repo
          - "repo:status"
          - delete_repo
          - notifications
          - gist

# Awkard root route.
/:
  get:
    description: A get request on the root resource.

# Test simple route
/route:
  get:
    description: A get request under `/route`.
  post:
  put:
  patch:
  delete:

# Test headers
/headers:
  /default:
    get:
      headers:
        X-Default-Header:
          type: string
          default: Default Value
      description: >
        Because sometimes you need to test the default header value and make
        sure it's being set automatically with requests.

# Test uri parameters
/parameters:
  /single:
    /{id}:
      get:
        description: >
          Test a single parameter key and make sure the DSL works as expected.
          For example, `.parameters.single.id(id).get()`.
  /prefix:
    /one{id}:
      get:
        description: >
          Test a parameter prefixed by static content and make sure the DSL
          still works as expected. E.g. `.parameters.prefix.one(id).get()`.
    /three{this}{that}{again}:
      get:
        description: |
          Make sure multiple chained parameters after static text still works
          the same. For example:

          ```
          client.resources.parameters.prefix.three(this, that, again).get();
          ```
  /default:
    /{parameter}:
      uriParameters:
        parameter:
          type: string
          default: test
      get:
        description: >
          How about a default parameter? What happens when the value is omitted?
          For example, `.parameters.default.parameter().get()` should make a
          request to `/parameters/default/test` since the default parameter will
          be automatically injected. Any empty value should be replaced by the
          default.

# Test extensions
/extensions:
  /static.json:
    get:
  /media-type:
    /enum{mediaTypeExtension}:
      uriParameters:
        mediaTypeExtension:
          enum: [json, xml]
      get:
    /enum-with-period{mediaTypeExtension}:
      uriParameters:
        mediaTypeExtension:
          enum: [.json, .xml]
      get:
    /basic{mediaTypeExtension}:
      get:

# Handle conflicting routes
/conflicts:
  /media-type:
    /route:
      get:
  /media-type{mediaTypeExtension}:
    get:

/search:
  /code:
    get:
      description: Search code.
      queryParameters:
        q:
          description: |
            The search terms. This can be any combination of the supported code
            search parameters:
            'Search In' Qualifies which fields are searched. With this qualifier
            you can restrict the search to just the file contents, the file path,
            or both.
            'Languages' Searches code based on the language it's written in.
            'Forks' Filters repositories based on the number of forks, and/or
            whether code from forked repositories should be included in the results
            at all.
            'Size' Finds files that match a certain size (in bytes).
            'Path' Specifies the path that the resulting file must be at.
            'Extension' Matches files with a certain extension.
            'Users' or 'Repositories' Limits searches to a specific user or repository.
          required: true
          example: "addClass+in:file+language:js+repo:jquery/jquery"
        sort:
          description: |
            Can only be 'indexed', which indicates how recently a file has been indexed
            by the GitHub search infrastructure. If not provided, results are sorted
            by best match.
          enum: [ indexed ]
          example: sort=stars
